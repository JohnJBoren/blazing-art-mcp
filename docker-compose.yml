version: '3.8'

services:
  # Development MCP Memory Server with hot reload
  mcp-memory-dev:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
    ports:
      - "4000:4000"
      - "3000:3000"
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
    command: cargo watch -x 'run -- --ws 0.0.0.0:4000 --health-port 3000 --entities examples/entities.json --events examples/events.json'

  # Production MCP Memory Server
  mcp-memory:
    build:
      context: .
      target: runtime
    ports:
      - "4000:4000"
      - "3000:3000"
    environment:
      - RUST_LOG=info
    command: [
      "/blazing_art_mcp",
      "--ws", "0.0.0.0:4000",
      "--health-port", "3000",
      "--telemetry"
    ]
    healthcheck:
      test: ["/blazing_art_mcp", "--health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Redis for external caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"  # OTLP gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

volumes:
  cargo-cache:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: mcp-memory-network
