# Production Kubernetes deployment with security, monitoring, and scaling
apiVersion: v1
kind: Namespace
metadata:
  name: mcp-memory
  labels:
    name: mcp-memory
    security.policy: restricted

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-memory-config
  namespace: mcp-memory
data:
  event_limit: "1000"
  health_port: "3000"
  log_level: "info"
  telemetry_enabled: "true"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: mcp-memory-secrets
  namespace: mcp-memory
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  otel_endpoint: aHR0cDovL29ldGwtY29sbGVjdG9yOjQzMTc=  # http://otel-collector:4317

---
# ServiceAccount with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-memory-sa
  namespace: mcp-memory
automountServiceAccountToken: false

---
# Role for pod-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mcp-memory-role
  namespace: mcp-memory
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mcp-memory-binding
  namespace: mcp-memory
subjects:
- kind: ServiceAccount
  name: mcp-memory-sa
  namespace: mcp-memory
roleRef:
  kind: Role
  name: mcp-memory-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for micro-segmentation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mcp-memory-netpol
  namespace: mcp-memory
spec:
  podSelector:
    matchLabels:
      app: mcp-memory
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: mcp-clients
    ports:
    - protocol: TCP
      port: 4000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: telemetry
    ports:
    - protocol: TCP
      port: 4317

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-memory-pdb
  namespace: mcp-memory
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mcp-memory

---
# Main Deployment with security hardening
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-memory
  namespace: mcp-memory
  labels:
    app: mcp-memory
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: mcp-memory
  template:
    metadata:
      labels:
        app: mcp-memory
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-memory-sa
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
        sysctls:
        - name: net.core.somaxconn
          value: "65535"
      
      # Init container for configuration validation
      initContainers:
      - name: config-validator
        image: busybox:1.36
        command: ['sh', '-c', 'echo "Validating configuration..." && sleep 2']
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: [ALL]
      
      containers:
      - name: mcp-memory
        image: mcp-memory:latest
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: [ALL]
        
        # Command and arguments
        args:
        - --ws=0.0.0.0:4000
        - --health-port=3000
        - --telemetry
        - --event-limit=$(EVENT_LIMIT)
        
        # Environment variables
        env:
        - name: EVENT_LIMIT
          valueFrom:
            configMapKeyRef:
              name: mcp-memory-config
              key: event_limit
        - name: HEALTH_PORT
          valueFrom:
            configMapKeyRef:
              name: mcp-memory-config
              key: health_port
        - name: RUST_LOG
          valueFrom:
            configMapKeyRef:
              name: mcp-memory-config
              key: log_level
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: mcp-memory-secrets
              key: otel_endpoint
        
        # Ports
        ports:
        - name: mcp
          containerPort: 4000
          protocol: TCP
        - name: health
          containerPort: 3000
          protocol: TCP
        
        # Resource limits and requests
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Probes
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health/live
            port: health
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-run-volume
          mountPath: /var/run
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: var-run-volume
        emptyDir:
          sizeLimit: 100Mi
      
      # Pod-level settings
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      
      # Node selection
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # Tolerations and affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mcp-memory
              topologyKey: kubernetes.io/hostname

---
# Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: mcp-memory-service
  namespace: mcp-memory
  labels:
    app: mcp-memory
spec:
  type: ClusterIP
  ports:
  - name: mcp
    port: 4000
    targetPort: mcp
    protocol: TCP
  - name: health
    port: 3000
    targetPort: health
    protocol: TCP
  selector:
    app: mcp-memory

---
# HorizontalPodAutoscaler for dynamic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-memory-hpa
  namespace: mcp-memory
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-memory
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mcp-memory-metrics
  namespace: mcp-memory
  labels:
    app: mcp-memory
spec:
  selector:
    matchLabels:
      app: mcp-memory
  endpoints:
  - port: health
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
